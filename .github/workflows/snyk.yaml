name: Security Pipeline

on:
  push: # run on every branch
  pull_request: # and on PRs
  workflow_dispatch:

permissions:
  contents: read

env:
  SEVERITY_THRESHOLD: medium # low|medium|high|critical
  GRACE_PERIOD_DAYS: "1" # grace window

jobs:
  snyk-sca:
    name: Snyk Open Source (SCA)
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Snyk CLI
        uses: snyk/actions/setup@master

      - name: Install snyk-to-html
        run: npm install -g snyk-to-html

      - name: Snyk test (SCA) -> JSON
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          mkdir -p reports
          snyk test --all-projects --severity-threshold=${{ env.SEVERITY_THRESHOLD }} \
            --json-file-output=reports/snyk-sca.json || true
          snyk-to-html -i reports/snyk-sca.json -o reports/snyk-sca.html || true

      # --- Grace period check (SCA) -------------------------------------------
      # Policy (SCA):
      # - Compare PUBLIC timeline: disclosureTime (fallback: publicationTime)
      # - cutoff = today - GRACE_PERIOD_DAYS
      # - Block if: severity >= threshold AND disclosureTime <= cutoff (older than grace)
      - name: Grace period check (SCA)
        run: |
          set -euo pipefail
          if [ ! -f reports/snyk-sca.json ]; then
            echo "No SCA JSON found (reports/snyk-sca.json)."
            exit 0
          fi

          cutoff=$(date -d "-${{ env.GRACE_PERIOD_DAYS }} days" +%s)
          cutoff_iso=$(date -u -d "@$cutoff" +"%Y-%m-%dT%H:%M:%SZ")

          case "${{ env.SEVERITY_THRESHOLD }}" in
            low) thr=0;; medium) thr=1;; high) thr=2;; critical) thr=3;; *) thr=2;;
          esac
          echo "SCA cutoff: $cutoff_iso (epoch=$cutoff) | threshold=${{ env.SEVERITY_THRESHOLD }}"

          violations=$(
            jq -r \
              --argjson cutoff "$cutoff" \
              --argjson thr "$thr" '
              # textual severity -> numeric
              def sevscore: {"low":0,"medium":1,"high":2,"critical":3}[.severity];
              # >>> use disclosureTime (fallback: publicationTime) <<<
              def datefield: (.disclosureTime // .publicationTime // "");
              [
                .vulnerabilities[]?
                | select(sevscore >= $thr)
                | . as $v
                # normalize millis and parse ISO; null stays null
                | ( (datefield | gsub("\\.[0-9]+Z$"; "Z")) | fromdateiso8601? ) as $epoch
                | select($epoch != null and $epoch <= $cutoff)   # older than grace -> violation
                | {sev: $v.severity, pkg: $v.packageName, title: $v.title, disclosureTime: (datefield), epoch: $epoch}
              ]' reports/snyk-sca.json
          )

          if [ "$violations" != "[]" ]; then
            echo "::error::SCA violations beyond ${{ env.GRACE_PERIOD_DAYS }} day(s):"
            echo "$violations"
            exit 1
          fi
          echo "SCA within grace or below threshold."

      # Send snapshot to Snyk UI tagged by branch
      - name: Snyk monitor (SCA) -> UI (by branch)
        if: always()
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          snyk monitor --all-projects \
            --target-reference="${{ github.ref_name }}" || true

      - name: Upload SCA reports
        uses: actions/upload-artifact@v4
        with:
          name: snyk-sca-reports
          path: reports/*sca.*

  snyk-code:
    name: Snyk Code (SAST)
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Snyk CLI
        uses: snyk/actions/setup@master

      - name: Install snyk-to-html
        run: npm install -g snyk-to-html

      - name: Snyk Code test -> JSON/HTML (local reports)
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          mkdir -p reports
          snyk code test --severity-threshold=${{ env.SEVERITY_THRESHOLD }} \
            --json-file-output=reports/snyk-code.json || true
          if [ -f reports/snyk-code.json ]; then
            snyk-to-html -i reports/snyk-code.json -o reports/snyk-code.html
          else
            echo "<html><body><h3>No Snyk Code issues found</h3></body></html>" > reports/snyk-code.html
          fi

      # --- Grace period check (SAST) ------------------------------------------
      # Policy (SAST):
      # - Use project identification dates: firstSeen (preferred) -> introducedDate (fallback)
      # - cutoff = today - GRACE_PERIOD_DAYS
      # - Block if: severity >= threshold AND firstSeen <= cutoff
      - name: Grace period check (SAST)
        run: |
          set -euo pipefail
          if [ ! -f reports/snyk-code.json ]; then
            echo "No SAST JSON found (reports/snyk-code.json)."
            exit 0
          fi

          cutoff=$(date -d "-${{ env.GRACE_PERIOD_DAYS }} days" +%s)
          cutoff_iso=$(date -u -d "@$cutoff" +"%Y-%m-%dT%H:%M:%SZ")

          case "${{ env.SEVERITY_THRESHOLD }}" in
            low) thr=0;; medium) thr=1;; high) thr=2;; critical) thr=3;; *) thr=2;;
          esac
          echo "SAST cutoff: $cutoff_iso (epoch=$cutoff) | threshold=${{ env.SEVERITY_THRESHOLD }}"

          violations=$(
            jq -r \
              --argjson cutoff "$cutoff" \
              --argjson thr "$thr" '
              def sevscore: {"low":0,"medium":1,"high":2,"critical":3}[.severity];
              # Snyk Code usually lacks disclosureTime; use project dates
              def datefield: (.firstSeen // .introducedDate // "");
              [
                .issues[]?
                | select(sevscore >= $thr)
                | . as $i
                | ( (datefield | gsub("\\.[0-9]+Z$"; "Z")) | fromdateiso8601? ) as $epoch
                | select($epoch != null and $epoch <= $cutoff)
                | {sev: $i.severity, rule: $i.ruleId, title: $i.title, firstSeen: (datefield), epoch: $epoch}
              ]' reports/snyk-code.json
          )

          if [ "$violations" != "[]" ]; then
            echo "::error::SAST violations beyond ${{ env.GRACE_PERIOD_DAYS }} day(s):"
            echo "$violations"
            exit 1
          fi
          echo "SAST within grace or below threshold."

      - name: Upload Code reports
        uses: actions/upload-artifact@v4
        with:
          name: snyk-code-reports
          path: reports/*code.*
